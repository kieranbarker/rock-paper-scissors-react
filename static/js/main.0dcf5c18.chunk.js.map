{"version":3,"sources":["images/logo.svg","components/Header/Header.js","icons.js","images/rock.svg","images/paper.svg","images/scissors.svg","components/Game/Game.js","components/Results/Results.js","helpers.js","components/App/App.js","index.js"],"names":["Header","score","className","src","logo","alt","icons","rock","paper","scissors","Game","choices","setUser","onClick","event","button","target","closest","dataset","id","map","choice","type","data-id","Results","user","computer","newGame","result","decideGame","newScore","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","storageKey","App","screen","useState","setComputer","setScore","useEffect","savedScore","localStorage","getItem","parseInt","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dcf5c18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a4a2b39f.svg\";","import PropTypes from 'prop-types';\nimport logo from '../../images/logo.svg';\nimport './Header.css';\n\nfunction Header({ score = 0 }) {\n  return (\n    <header className=\"header\">\n      <h1>\n        <img className=\"logo\" src={logo} alt=\"Rock Paper Scissors\" />\n      </h1>\n      <p className=\"score\">\n        <span className=\"score__heading\">Score</span>\n        <span className=\"score__number\">{score}</span>\n      </p>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  score: PropTypes.number\n};\n\nexport default Header;\n","import rock from './images/rock.svg';\nimport paper from './images/paper.svg';\nimport scissors from './images/scissors.svg';\n\nconst icons = { rock, paper, scissors };\n\nexport default icons;\n","export default __webpack_public_path__ + \"static/media/rock.476e90a9.svg\";","export default __webpack_public_path__ + \"static/media/paper.8b57a6b1.svg\";","export default __webpack_public_path__ + \"static/media/scissors.3b1a5d7e.svg\";","import PropTypes from 'prop-types';\nimport icons from '../../icons';\nimport './Game.css';\n\nfunction Game({ choices, setUser }) {\n  /**\n   * Handle click events\n   * @param {Event} event The Event object\n   */\n  const handleClick = event => {\n    const button = event.target.closest('button');\n    if (!button) return;\n    setUser(button.dataset.id);\n  };\n\n  return (\n    <article className=\"game\" onClick={handleClick}>\n      {choices.map(choice => (\n        <button\n          className={`game__button game__button--${choice}`}\n          type=\"button\"\n          data-id={choice}\n          key={choice}\n        >\n          <img src={icons[choice]} alt={choice} />\n        </button>\n      ))}\n    </article>\n  );\n}\n\nGame.propTypes = {\n  choices: PropTypes.array.isRequired,\n  setUser: PropTypes.func\n};\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport icons from '../../icons';\nimport './Results.css';\n\nfunction Results({ user, computer, score, newGame }) {\n  /**\n   * Decide the outcome of the game\n   * @param {String} user The user's choice\n   * @param {String} computer The computer's choice\n   * @returns {String} The outcome (win/lose/draw)\n   */\n  const decideGame = (user, computer) => {\n    if (user === computer) return 'draw';\n    const rules = {\n      rock: 'scissors',\n      paper: 'rock',\n      scissors: 'paper'\n    };\n    if (rules[user] === computer) return 'you win';\n    return 'you lose';\n  };\n\n  /**\n   * Handle click events\n   */\n  const handleClick = () => {\n    let newScore;\n    if (result === 'draw') {\n      newScore = score;\n    } else if (result === 'you win') {\n      newScore = score + 1;\n    } else if (result === 'you lose') {\n      newScore = score - 1;\n    }\n    newGame(newScore);\n  };\n\n  // Decide the outcome of the game\n  const result = decideGame(user, computer);\n\n  return (\n    <article className=\"results\">\n      <h2 className=\"results__heading\">{result}</h2>\n      <div className=\"choices\">\n        <article className=\"choice\">\n          <h3 className=\"choice__heading\">You picked</h3>\n          <div className={`choice__image choice__image--${user}`}>\n            <img src={icons[user]} alt={user} />\n          </div>\n        </article>\n        <article className=\"choice\">\n          <h3 className=\"choice__heading\">Computer picked</h3>\n          <div className={`choice__image choice__image--${computer}`}>\n            <img src={icons[computer]} alt={computer} />\n          </div>\n        </article>\n      </div>\n      <button className=\"play-again\" type=\"button\" onClick={handleClick}>\n        Play Again\n      </button>\n    </article>\n  );\n}\n\nResults.propTypes = {\n  user: PropTypes.string.isRequired,\n  computer: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  newGame: PropTypes.func\n};\n\nexport default Results;\n","/**\n * Randomly shuffle an array\n * {@link https://stackoverflow.com/a/2450976/1293256}\n * @param {Array} array The array to shuffle\n * @returns {Array} The shuffled array\n */\nexport function shuffle(array) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport Game from '../Game/Game';\nimport Results from '../Results/Results';\nimport { shuffle } from '../../helpers';\n\nconst choices = ['rock', 'paper', 'scissors'];\nconst storageKey = 'rpsScore';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [computer, setComputer] = useState(shuffle([...choices])[0]);\n  const [score, setScore] = useState(0);\n\n  // Which screen to show\n  let screen;\n\n  /**\n   * Start a new game\n   * @param {Number} score The new score after the previous game\n   */\n  function newGame(score) {\n    setUser(null);\n    setComputer(shuffle([...choices])[0]);\n    setScore(score);\n  }\n\n  // Load the saved score\n  useEffect(() => {\n    let savedScore = localStorage.getItem(storageKey);\n    if (!savedScore) return;\n    setScore(parseInt(savedScore, 10));\n  }, []);\n\n  // Save the score when it changes\n  useEffect(() => {\n    localStorage.setItem(storageKey, score);\n  }, [score]);\n\n  // Decide which screen to show\n  if (user) {\n    screen = (\n      <Results\n        user={user}\n        computer={computer}\n        score={score}\n        newGame={newGame}\n      />\n    );\n  } else {\n    screen = <Game choices={choices} setUser={setUser} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <Header score={score} />\n      <main>\n        {screen}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}