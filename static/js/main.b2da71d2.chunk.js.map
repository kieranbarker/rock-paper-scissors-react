{"version":3,"sources":["images/logo.svg","components/Header/Header.js","icons.js","images/rock.svg","images/paper.svg","images/scissors.svg","components/Game/Game.js","components/Results/Results.js","helpers.js","components/App/App.js","index.js"],"names":["Header","score","className","src","logo","alt","Object","keys","map","result","icons","rock","paper","scissors","Game","choices","setUser","onClick","event","button","target","closest","dataset","id","choice","type","data-id","Results","user","computer","newGame","decideGame","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","storageKey","App","screen","useState","setComputer","won","lost","drew","setScore","useEffect","savedScore","localStorage","getItem","JSON","parse","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2da71d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a4a2b39f.svg\";","import PropTypes from 'prop-types';\nimport logo from '../../images/logo.svg';\nimport './Header.css';\n\nfunction Header({ score }) {\n  return (\n    <header className=\"header\">\n      <h1>\n        <img className=\"logo\" src={logo} alt=\"Rock Paper Scissors\" />\n      </h1>\n      <div className=\"score\">\n        <p className=\"score__heading\">Score</p>\n        <ul className=\"score__results\">\n          {Object.keys(score).map(result => (\n            <li key={result}>{result}: {score[result]}</li>\n          ))}\n        </ul>\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  score: PropTypes.exact({\n    won: PropTypes.number.isRequired,\n    lost: PropTypes.number.isRequired,\n    drew: PropTypes.number.isRequired\n  })\n};\n\nexport default Header;\n","import rock from './images/rock.svg';\nimport paper from './images/paper.svg';\nimport scissors from './images/scissors.svg';\n\nconst icons = { rock, paper, scissors };\n\nexport default icons;\n","export default __webpack_public_path__ + \"static/media/rock.476e90a9.svg\";","export default __webpack_public_path__ + \"static/media/paper.8b57a6b1.svg\";","export default __webpack_public_path__ + \"static/media/scissors.3b1a5d7e.svg\";","import PropTypes from 'prop-types';\nimport icons from '../../icons';\nimport './Game.css';\n\nfunction Game({ choices, setUser }) {\n  /**\n   * Handle click events\n   * @param {Event} event The Event object\n   */\n  const handleClick = event => {\n    const button = event.target.closest('button');\n    if (!button) return;\n    setUser(button.dataset.id);\n  };\n\n  return (\n    <article className=\"game\" onClick={handleClick}>\n      {choices.map(choice => (\n        <button\n          className={`game__button game__button--${choice}`}\n          type=\"button\"\n          data-id={choice}\n          key={choice}\n        >\n          <img src={icons[choice]} alt={choice} />\n        </button>\n      ))}\n    </article>\n  );\n}\n\nGame.propTypes = {\n  choices: PropTypes.array.isRequired,\n  setUser: PropTypes.func\n};\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport icons from '../../icons';\nimport './Results.css';\n\nfunction Results({ user, computer, newGame }) {\n  /**\n   * Decide the outcome of the game\n   * @param {String} user The user's choice\n   * @param {String} computer The computer's choice\n   * @returns {String} The outcome (won/lost/drew)\n   */\n  const decideGame = (user, computer) => {\n    if (user === computer) return 'drew';\n    const rules = {\n      rock: 'scissors',\n      paper: 'rock',\n      scissors: 'paper'\n    };\n    if (rules[user] === computer) return 'won';\n    return 'lost';\n  };\n\n  /**\n   * Handle click events\n   */\n  const handleClick = () => {\n    newGame(result);\n  };\n\n  // Decide the outcome of the game\n  const result = decideGame(user, computer);\n\n  return (\n    <article className=\"results\">\n      <h2 className=\"results__heading\">You {result}</h2>\n      <div className=\"choices\">\n        <article className=\"choice\">\n          <h3 className=\"choice__heading\">You picked</h3>\n          <div className={`choice__image choice__image--${user}`}>\n            <img src={icons[user]} alt={user} />\n          </div>\n        </article>\n        <article className=\"choice\">\n          <h3 className=\"choice__heading\">Computer picked</h3>\n          <div className={`choice__image choice__image--${computer}`}>\n            <img src={icons[computer]} alt={computer} />\n          </div>\n        </article>\n      </div>\n      <button className=\"play-again\" type=\"button\" onClick={handleClick}>\n        Play Again\n      </button>\n    </article>\n  );\n}\n\nResults.propTypes = {\n  user: PropTypes.string.isRequired,\n  computer: PropTypes.string.isRequired,\n  newGame: PropTypes.func\n};\n\nexport default Results;\n","/**\n * Randomly shuffle an array\n * {@link https://stackoverflow.com/a/2450976/1293256}\n * @param {Array} array The array to shuffle\n * @returns {Array} The shuffled array\n */\nexport function shuffle(array) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport Game from '../Game/Game';\nimport Results from '../Results/Results';\nimport { shuffle } from '../../helpers';\n\nconst choices = ['rock', 'paper', 'scissors'];\nconst storageKey = 'rpsScore';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [computer, setComputer] = useState(shuffle([...choices])[0]);\n  const [score, setScore] = useState({ won: 0, lost: 0, drew: 0 });\n\n  // Which screen to show\n  let screen;\n\n  /**\n   * Start a new game\n   * @param {String} result The result of the previous game\n   */\n  function newGame(result) {\n    setUser(null);\n    setComputer(shuffle([...choices])[0]);\n    setScore({ ...score, [result]: score[result] + 1 });\n  }\n\n  // Load the saved score\n  useEffect(() => {\n    let savedScore = localStorage.getItem(storageKey);\n    if (!savedScore) return;\n    setScore(JSON.parse(savedScore));\n  }, []);\n\n  // Save the score when it changes\n  useEffect(() => {\n    localStorage.setItem(storageKey, JSON.stringify(score));\n  }, [score]);\n\n  // Decide which screen to show\n  if (user) {\n    screen = <Results user={user} computer={computer} newGame={newGame} />;\n  } else {\n    screen = <Game choices={choices} setUser={setUser} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <Header score={score} />\n      <main>\n        {screen}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}